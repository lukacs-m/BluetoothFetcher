//
//  DeviceDetailsViewModel.swift
//  BluetoothFetcher
//
//  Created by Martin Lukacs on 05/07/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates
//

import Combine
import CoreBluetooth
import Foundation
import Resolver
import SwiftUICombineToolBox

final class DeviceDetailsViewModel: ObservableObject {
    @Published var services: [CBService] = []
    @Published var characteristics: [CBUUID: [CBCharacteristic]] = [:]

    @Injected private var bluetoothRepository: BluetoothDeviceServicing
    private var cancelBag = CancelBag()

    init() {
        setUp()
    }

    func fetchServiceInformations(for deviceInfo: BluetoothDeviceInfo) {
        bluetoothRepository.connectToPeripheralDevice(with: deviceInfo)
    }

    func disconnectFromDevice() {
        bluetoothRepository.disconnectForPeripheralDevice()
    }

    func getcharacteristics(for service: CBService) -> [CBCharacteristic] {
        characteristics[service.uuid] ?? []
    }
}

private extension DeviceDetailsViewModel {
    func setUp() {
        bluetoothRepository.currentServices
            .receive(on: DispatchQueue.main)
            .assignNoRetain(to: \.services, on: self)
            .store(in: &cancelBag)

        bluetoothRepository.currentCharactericstics
            .receive(on: DispatchQueue.main)
            .assignNoRetain(to: \.characteristics, on: self)
            .store(in: &cancelBag)
    }
}
