//
//  DevicesListViewModel.swift
//  BluetoothFetcher
//
//  Created by Martin Lukacs on 05/07/2021.
//  Copyright (c) 2021 Martin. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates
//

import Combine
import Foundation
import Resolver
import SwiftUICombineToolBox

final class DevicesListViewModel: ObservableObject {
    @Published var devices: [BluetoothDeviceInfo] = []
    @Published var isCurrentlyScanning = false

    @Injected private var bluetoothRepository: BluetoothDeviceServicing
    private var cancelBag = CancelBag()

    init() {
        setUp()
    }

    func startScanningForDevices() {
        bluetoothRepository.startScanning()
    }

    func stopscanningForDevices() {
        bluetoothRepository.stopScanning()
    }
}

private extension DevicesListViewModel {
    func setUp() {
        bluetoothRepository.currentNearbyDevices
            .debounce(for: .seconds(1), scheduler: RunLoop.main)
            .receive(on: DispatchQueue.main)
            .sink(receiveValue: { [weak self] deviceDictionnary in
                self?.devices = deviceDictionnary.map { (_: UUID, value: BluetoothDeviceInfo) in
                    value
                }.sorted { $0.rssi.intValue > $1.rssi.intValue }
            }).store(in: &cancelBag)

        bluetoothRepository.isCurrentlyScanning
            .receive(on: DispatchQueue.main)
            .assignNoRetain(to: \.isCurrentlyScanning, on: self)
            .store(in: &cancelBag)
    }
}
